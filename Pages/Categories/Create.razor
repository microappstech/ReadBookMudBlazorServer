@page "/createcategory"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject Service ServiceCategory
@inject NavigationManager NavigationManager 

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="formCate" @bind-IsValid="success"  @bind-Errors="errors">
                <MudTextField T="string" Label="Description" Required="true" @bind-Value="@Category.Name" RequiredError="Description is Required"></MudTextField>
                
                <div class="d-flex align-center justify-space-between">
                    <button @onclick="@(()=>Save())">Test </button>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" @onclick="@(()=>Save())" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Save" Disabled="@(!success)" Class="ml-auto">Save</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>formCate.ResetAsync())" Class="mx-2">Reset</MudButton>
        </MudPaper>
    </MudItem>
    
</MudGrid>


@code {
    MudForm formCate;
    public Category Category ;
    [Inject]
    protected NavigationManager UriHelper { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Category  = new Category();
    }
    public async Task Save()
    {
        try
        {
            var resultSave = await ServiceCategory.CreateCategory(Category);
            if(resultSave!=null){
                await InvokeAsync(StateHasChanged);
                UriHelper.NavigateTo("/categories",true);
            }
        }
        catch(Exception ex)
        {
            
        }


    }

    bool success;
    string[] errors = { };
}