
@page "/categories"
@using ReadBookMuds.Services
@using ReadBookMuds.Models
@inject Service ServiceCategy
@inject IDialogService DialogService

<PageTitle>Categories</PageTitle>

<div class="row d-flex mb-3">
    <div class="col-md-4 d-flex justify-content-between">
        <MudButton Variant="Variant.Filled" Size="@Size.Medium" StartIcon="@Icons.Material.Filled.Add" Href="/createcategory" Color="Color.Primary">Add</MudButton>
        <MudButton Variant="Variant.Filled" Size="@Size.Medium" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete Selected</MudButton>
    </div>
</div>
<MudDataGrid Items="@Categories" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <SelectColumn T="Category"/>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <TemplateColumn CellClass="p-0 m-0">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" @onclick="@(()=>Delete(context.Item.Id))"></MudIconButton>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" Href="@string.Concat("/editcategory/", context.Item.Id)"></MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    public List<Category> Categories;


    protected override async Task OnInitializedAsync()
    {
        Categories = await ServiceCategy.GetCategories();
    }


    private async void Delete(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to remove this category");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var result = await DialogService.Show<Dialog>("Confirm", parameters).Result;
        if (!result.Canceled)
        {
            var resultdelete = await ServiceCategy.DeleteCategory(id);
            Categories = await ServiceCategy.GetCategories();
            await InvokeAsync(StateHasChanged);
        }
    }



}
